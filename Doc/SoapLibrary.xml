<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="SoapLibrary" type="LIBRARY" format="ROBOT" scope="SUITE" generated="2022-10-07T15:38:18Z" specversion="4" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\__init__.py" lineno="4">
<version>1.1</version>
<doc>SoapLibrary is a library for testing SOAP-based web services.

SoapLibrary is based on [https://python-zeep.readthedocs.io/en/master/|Zeep], a modern SOAP client for Python.

This library is designed for those who want to work with webservice automation as if they were using SoapUI,
make a request through an XML file, and receive the response in another XML file.

= Example =

| ***** Settings *****
| Library           SoapLibrary
| Library           OperatingSystem
|
| ***** Test Cases *****
| Simple Example
|     Create Soap Client    http://endpoint.com/example.asmx?wsdl
|     ${response}    Call SOAP Method    Method_name    arg1    arg2
|     Log    ${response}
|
| Example With XML
|     Create Soap Client    http://endpoint.com/example.asmx?wsdl
|     ${response}    Call SOAP Method With XML    ${CURDIR}/request.xml
|     ${text}    Get Data From XML By Tag    ${response}    tag_name
|     Log    ${text}
|     Save XML To File    ${response}    ${CURDIR}    response_test</doc>
<tags>
</tags>
<inits>
</inits>
<keywords>
<kw name="Call SOAP Method" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="234">
<arguments repr="name, *args, status=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="status=None">
<name>status</name>
<default>None</default>
</arg>
</arguments>
<doc>If the webservice have simple SOAP operation/method with few arguments, you can call the method with the given
`name` and `args`.

The first argument of the keyword  ``name``  is the operation name of the ``SOAP operation/method``
[https://www.soapui.org/soap-and-wsdl/operations-and-requests.html|More information here]

By default, this keyword fails if a status code different from 200 is returned as response,
this behavior can be modified using the argument status=anything

*Input Arguments:*
| *Name* | *Description* |
| name | Name of the SOAP operation/method |
| args | List of request entries |
| status | if set as anything, return the error as a string |

*Example:*
| ${response}= | Call SOAP Method | operation_name | arg1 | arg2 |
| ${response}= | Call SOAP Method | operation_name | arg1 | arg2 | status=anything |</doc>
<shortdoc>If the webservice have simple SOAP operation/method with few arguments, you can call the method with the given `name` and `args`.</shortdoc>
</kw>
<kw name="Call SOAP Method With String XML" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="284">
<arguments repr="string_xml, headers={'Content-Type': 'text/xml; charset=utf-8'}, status=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="string_xml">
<name>string_xml</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="headers={'Content-Type': 'text/xml; charset=utf-8'}">
<name>headers</name>
<default>{'Content-Type': 'text/xml; charset=utf-8'}</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="status=None">
<name>status</name>
<default>None</default>
</arg>
</arguments>
<doc>Send a string representation of XML as a request to the SOAP client.
The SOAP method is inside the XML string.

By default, this keyword fails if a status code different from 200 is returned as response,
this behavior can be modified using the argument status=anything

*Input Arguments:*
| *Name* | *Description* |
| string_xml | string representation of XML |
| headers | dictionary with request headers. Default ``{'Content-Type': 'text/xml; charset=utf-8'}`` |
| status | optional string: anything |

*Example:*
| ${response}= | Call SOAP Method With String XML | "&lt;sample&gt;&lt;Id&gt;1&lt;/Id&gt;&lt;/sample&gt;" |
| ${response}= | Call SOAP Method With String XML | "&lt;sample&gt;&lt;Id&gt;error&lt;/Id&gt;&lt;/sample&gt;" | status=anything |</doc>
<shortdoc>Send a string representation of XML as a request to the SOAP client. The SOAP method is inside the XML string.</shortdoc>
</kw>
<kw name="Call SOAP Method With XML" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="77">
<arguments repr="xml, headers={'Content-Type': 'text/xml; charset=utf-8'}, status=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xml">
<name>xml</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="headers={'Content-Type': 'text/xml; charset=utf-8'}">
<name>headers</name>
<default>{'Content-Type': 'text/xml; charset=utf-8'}</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="status=None">
<name>status</name>
<default>None</default>
</arg>
</arguments>
<doc>Send an XML file as a request to the SOAP client. The path to the Request XML file is required as argument,
the SOAP method is inside the XML file.

By default, this keyword fails if a status code different from 200 is returned as response,
this behavior can be modified using the argument status=anything

*Input Arguments:*
| *Name* | *Description* |
| xml | file path to xml file |
| headers | dictionary with request headers. Default ``{'Content-Type': 'text/xml; charset=utf-8'}`` |
| status | optional string: anything |

*Example:*
| ${response}= | Call SOAP Method With XML |  ${CURDIR}${/}Request.xml |
| ${response}= | Call SOAP Method With XML |  ${CURDIR}${/}Request_status_500.xml | status=anything |</doc>
<shortdoc>Send an XML file as a request to the SOAP client. The path to the Request XML file is required as argument, the SOAP method is inside the XML file.</shortdoc>
</kw>
<kw name="Convert XML Response to Dictionary" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="201">
<arguments repr="xml_etree">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xml_etree">
<name>xml_etree</name>
</arg>
</arguments>
<doc>Convert the webservice response into a dictionary.

*Input Arguments:*
| *Name* | *Description* |
| xml_etree | etree object of the xml to convert to dictionary |

*Example:*
| ${response}= | Call SOAP Method With XML |  ${CURDIR}${/}Request.xml |
| ${dict_response}= | Convert XML Response to Dictionary | ${response} |</doc>
<shortdoc>Convert the webservice response into a dictionary.</shortdoc>
</kw>
<kw name="Create SOAP Client" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="33">
<arguments repr="url, ssl_verify=True, client_cert=None, auth=None, use_binding_address=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url">
<name>url</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ssl_verify=True">
<name>ssl_verify</name>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="client_cert=None">
<name>client_cert</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="auth=None">
<name>auth</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_binding_address=False">
<name>use_binding_address</name>
<default>False</default>
</arg>
</arguments>
<doc>Loads a WSDL from the given ``url`` and creates a Zeep client.
List all Available operations/methods with INFO log level.

By default, server TLS certificate is validated. You can disable this behavior
by setting ``ssl_verify`` to ``False`` (not recommended!).
If your host uses a self-signed certificate, you can also pass the path of the
CA_BUNDLE to ``sll_verify``. Accepted are only X.509 ASCII files (file extension .pem, sometimes .crt).
If you have two different files for root and intermediate certificate,
you must combine them manually into one.

If your host requires client certificate based authentication, you can pass the
path to your client certificate to the ``client_cert`` argument.

For HTTP Basic Authentication, you can pass the list with username and password
to the ``auth`` parameter.

If you want to use the binding address in the requests, you need to pass use_binding_address=True
in the argment, note that this will only affect the keywords `Call SOAP Method With XML`
and `Call SOAP Method With String XML`

*Example:*
| Create SOAP Client | http://endpoint.com?wsdl |
| Create SOAP Client | https://endpoint.com?wsdl | ssl_verify=True |
| Create SOAP Client | https://endpoint.com?wsdl | use_binding_address=True |
| Create SOAP Client | https://endpoint.com?wsdl | client_cert=${CURDIR}${/}mycert.pem |
| ${auth} | Create List | username | password |
| Create SOAP Client | https://endpoint.com?wsdl | auth=${auth} |</doc>
<shortdoc>Loads a WSDL from the given ``url`` and creates a Zeep client. List all Available operations/methods with INFO log level.</shortdoc>
</kw>
<kw name="Decode Base64" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="266">
<arguments repr="response">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="response">
<name>response</name>
</arg>
</arguments>
<doc>Decodes texts that are base64 encoded.

Returns the decoded response

*Input Arguments:*
| *Name* | *Description* |
| response | Response of the webservice coded in base64 |

*Example:*
| ${response}= | Call SOAP Method With XML |  ${CURDIR}${/}Request.xml |
| ${response_decoded}= | Decode Base64 | ${response} |</doc>
<shortdoc>Decodes texts that are base64 encoded.</shortdoc>
</kw>
<kw name="Edit XML Request" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="136">
<arguments repr="xml_file_path, new_values_dict, edited_request_name, repeated_tags=All">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xml_file_path">
<name>xml_file_path</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="new_values_dict">
<name>new_values_dict</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="edited_request_name">
<name>edited_request_name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="repeated_tags=All">
<name>repeated_tags</name>
<default>All</default>
</arg>
</arguments>
<doc>Changes a field on the given XML to a new given value, the values must be in a dictionary.
xml_filepath must be a "template" of the request to the webservice.
new_values_dict must be a dictionary with the keys and values to change.
request_name will be the name of the new XMl file generated with the changed request.

If there is a tag that appears more than once, all occurrences will be replaced by the new value by default.
If you want to change a specific tag, inform the occurrence number in the repeated_tags argument.

Returns the file path of the new Request file.

*Input Arguments:*
| *Name* | *Description* |
| xml_file_path | file path to xml file |
| new_values_dict | dictionary with tags as keys and tag value as value |
| edited_request_name |  name of the new XMl file generated with the changed request |
| repeated_tags |  Occurrence number of the repeated tag to change value |

*Example*:
| ${dict}= | Create Dictionary | tag_name1=SomeText | tag_name2=OtherText |
| ${xml_edited}= | Edit XML Request | request_filepath | ${dict} | New_Request |
| ${xml_edited}= | Edit XML Request | request_filepath | ${dict} | New_Request | repeated_tags=0 |</doc>
<shortdoc>Changes a field on the given XML to a new given value, the values must be in a dictionary. xml_filepath must be a "template" of the request to the webservice. new_values_dict must be a dictionary with the keys and values to change. request_name will be the name of the new XMl file generated with the changed request.</shortdoc>
</kw>
<kw name="Get Data From XML By Tag" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="105">
<arguments repr="xml, tag, index=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xml">
<name>xml</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tag">
<name>tag</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index=1">
<name>index</name>
<default>1</default>
</arg>
</arguments>
<doc>Gets data from XML using a given tag. If the tag returns zero or more than one result, it will show a warning.
The xml argument must be an etree object, can be used with the return of the keyword `Call SOAP Method With XML`.

Returns the string representation of the value.

*Input Arguments:*
| *Name* | *Description* |
| xml | xml etree object |
| tag | tag to get value from |
| index | tag index if there are multiple tags with the same name, starting at 1. Default is set to 1 |

*Examples:*
| ${response}= | Call SOAP Method With XML |  ${CURDIR}${/}Request.xml |
| ${value}= | Get Data From XML By Tag |  ${response} | SomeTag |
| ${value}= | Get Data From XML By Tag |  ${response} | SomeTag | index=9 |</doc>
<shortdoc>Gets data from XML using a given tag. If the tag returns zero or more than one result, it will show a warning. The xml argument must be an etree object, can be used with the return of the keyword `Call SOAP Method With XML`.</shortdoc>
</kw>
<kw name="Save XML To File" source="C:\Repos\Robot-Framework-SOAP-Library\SoapLibrary\SoapLibrary.py" lineno="181">
<arguments repr="etree_xml, save_folder, file_name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="etree_xml">
<name>etree_xml</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="save_folder">
<name>save_folder</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="file_name">
<name>file_name</name>
</arg>
</arguments>
<doc>Save the webservice response as an XML file.

Returns the file path of the newly created xml file.

*Input Arguments:*
| *Name* | *Description* |
| etree_xml | etree object of the xml |
| save_folder | directory to save the new file |
| file_name | name of the new xml file without .xml |

*Example*:
| ${response}= | Call SOAP Method With XML |  ${CURDIR}${/}Request.xml |
| ${response_file}= | Save XML To File |  ${response} | ${CURDIR} | response_file_name |</doc>
<shortdoc>Save the webservice response as an XML file.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
</typedocs>
</keywordspec>
